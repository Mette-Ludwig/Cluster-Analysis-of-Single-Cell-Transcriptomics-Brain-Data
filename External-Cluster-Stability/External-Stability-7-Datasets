# Load packages
library(Seurat)
library(dplyr)
library(Matrix)
library(fossil)
library(foreach)
library(doMC)


# Allow 20 cores to be used
registerDoMC(10)


# Load functions for data processing and clustering
source("Data_processing_and_clustering.R")


# Define the paths to data folders
data.paths <- vector(length=8)

data.paths[1] <- paste("ygg-data/sc-10x/data-runs/170504-perslab-arc_pilot",
                       "/agg_arc1-2/outs/filtered_gene_bc_matrices_mex/mm10", sep="") 
data.paths[2] <- paste("ygg-data/sc-10x/data-runs/170610-agg-arc_hypo_pilot",
                       "/agg_arc_hypo/outs/filtered_gene_bc_matrices_mex/mm10", sep="")
data.paths[3] <- paste("ygg-data/sc-10x/data-runs/170610-perslab-hypothalamus",
                       "/agg_hypo1-2/outs/filtered_gene_bc_matrices_mex/mm10", sep="")
data.paths[4] <-paste("ygg-data/sc-10x/data-runs/170610-perslab-speciesmix_pbmc",
                      "/speciesmix_pbmc-run1/outs/filtered_gene_bc_matrices/hg19", sep="")
data.paths[5] <- paste("ygg-data/sc-10x/data-runs/170720-agace-intestine",
                       "/agg_T1_T2_T3/outs/filtered_gene_bc_matrices_mex/hg19", sep="")
data.paths[6] <- paste("ygg-data/sc-10x/data-runs/170825-egerod-nodose_gut",
                       "/agg-1_ND-2_ND/outs/filtered_gene_bc_matrices_mex/mm10", sep="")
data.paths[7] <- paste("ygg-data/sc-10x/data-runs/170907-kirkeby-mistr",
                       "/M1-5000_cells/outs/filtered_gene_bc_matrices/hg19", sep="")


resolutions <- c(seq(0.1, 6, 0.1))
n.iterations <- 10
set.seed(1)


time.start <- proc.time()

# Loop over different datasets
stability <- foreach(k = 1:7) %do% { 
  
  # Load data
  brain.data <- Read10X(data.dir = file.path(data.paths[k]))
  
  # Initialize a Seurat object 
  brain <- CreateSeuratObject(raw.data = brain.data, min.cells = 3, min.genes = 200, 
                              project = "10X_brain")
  
  # Take care of different abbreviations for mitochondrial RNA
  if (k == 4 | k==7) {
    mt <- "^MT-"
  }
  else 
    mt <- "^mt-"
    
  # Preprocess the data for clustering
  brain <- perform.pca(data = brain, mt=mt, nPCs=15)
  
  # Create bootstrap indices
  boot.idx <- matrix(nrow=n.iterations, ncol=ncol(brain.data))
  for (i in 1:nrow(boot.idx)){
    boot.idx[i,] <- sample(x=1:ncol(brain.data), size=ncol(brain.data), 
                           replace=TRUE)}
  
  # Loop over different resolutions in a parallelized loop
  foreach(i = 1:length(resolutions), .combine = rbind) %dopar% {
    
    # Find clusters
    brain <- find.clusters(data = brain, resolution = resolutions[i], nPCs = 15)
    
    # Initialize vectors to store data
    RI <- vector(length = n.iterations)
    ARI <- vector(length = n.iterations)
    n.clusters.boot <- vector(length = n.iterations)
    
    # Loop over different iterations
    foreach(j=1:n.iterations, .combine=c) %do% {
      
      # Generate a bootstrap dataset
      boot.data <- brain.data[, boot.idx[j,]]
      
      # Add a unique prefix to the cell names since some Seurat functions only accept unique
      # cell names
      colnames(boot.data) <- paste(seq(1,length(brain.data[1,])), colnames(boot.data),
                                   sep="-")
      # Create a Seurat object
      boot <- CreateSeuratObject(raw.data = boot.data, min.cells = 3, min.genes = 200, 
                                 project = "10X_brain_boot")
      # Perform PCA and cluster the cells 
      boot <- perform.pca(data=boot, mt=mt, nPCs=15)
      boot <- find.clusters(data = boot, resolution = resolutions[i], nPCs = 15)
      
      # Remove prefix from cell names in the bootstrap dataset
      boot.cell.names <- sub("[0-9]*-", "", boot@cell.names)
      
      # Find the indices of the data points in the original dataset matching the
      # cell names in the bootstrap dataset
      idx <- match(boot.cell.names, brain@cell.names)
      
      # Turn cluster identity into a numeric value starting from 1
      boot.ident <- as.numeric(boot@ident)
      brain.ident <- as.numeric(brain@ident[idx])
      
      if (sum(is.na(brain.ident)) > 0){
        idx.remove <- which(is.na(brain.ident))
        boot.ident <- boot.ident[-idx.remove]
        brain.ident <- brain.ident[-idx.remove]}
      
      # Compute the Rand index and Adjusted Rand index
      RI[j] <- rand.index(brain.ident, boot.ident)
      ARI[j] <- adj.rand.index(brain.ident, boot.ident)
      
      # Number of cluster in the bootstrap sample
      n.clusters.boot[j] <- length(unique(boot.ident))
      
    }
    
    # Add information to the cluster stability matrix
    # Number of clusters in the original dataset
    n.clusters.brain <- length(unique(brain.ident))
    
    list(resolution=resolutions[i], n.clusters.boot=mean(n.clusters.boot), 
         n.clusters.brain=n.clusters.brain, RI=mean(RI), RI.sd=sd(RI), 
         ARI=mean(ARI), ARI.sd=sd(ARI))
  }
}

# Evaluate the runtime
time.total <- round(proc.time() - time.start, digits=0)
print(time.total)


save(stability, file= "~/ygg-projects/mludwig/Rand_Index/RI_7_datasets.RData")
